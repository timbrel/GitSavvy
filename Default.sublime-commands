[
    {
        "caption": "Preferences: GitSavvy Settings",
        "command": "edit_settings",
        "args": {
            "base_file": "${packages}/GitSavvy/GitSavvy.sublime-settings",
            "default": "// Settings in here override those in \"GitSavvy/GitSavvy.sublime-settings\",\n\n{\n\t$0\n}\n"
        }
    },
    {
        "caption": "Preferences: GitSavvy Project Settings",
        "command": "gs_edit_project_settings"
    },
    {
        "caption": "Preferences: GitSavvy Key Bindings",
        "command": "gs_edit_settings",
        "args": {
            "base_file": "${packages}/GitSavvy/Default (${platform}).sublime-keymap"
        }
    },

    {
        "caption": "git: diff current file inline",
        "command": "gs_inline_diff"
    },
    {
        "caption": "git: diff current file inline (cached)",
        "command": "gs_inline_diff",
        "args": { "cached": true }
    },
    {
        "caption": "git: quick stage",
        "command": "gs_quick_stage"
    },
    {
        "caption": "git: edit and stage diff",
        "command": "gs_stage_diff"
    },
    {
        "caption": "git: quick commit",
        "command": "gs_quick_commit"
    },
    {
        "caption": "git: quick stage current file and commit",
        "command": "gs_quick_stage_current_file_commit"
    },
    {
        "caption": "git: fixup from stage",
        "command": "gs_fixup_from_stage"
    },
    {
        "caption": "git: quick stage current file and fixup",
        "command": "gs_quick_stage_current_file_and_fixup"
    },
    {
        "caption": "git: status",
        "command": "gs_show_status"
    },
    {
        "caption": "git: commit",
        "command": "gs_commit"
    },
    {
        "caption": "git: commit including unstaged files",
        "command": "gs_commit",
        "args": { "include_unstaged": true }
    },
    {
        "caption": "git: amend previous commit",
        "command": "gs_amend"
    },
    {
        "caption": "git: quick stage current file and amend",
        "command": "gs_quick_stage_current_file_and_amend"
    },
    {
        "caption": "git: graph",
        "command": "gs_log_graph"
    },
    {
        "caption": "git: graph current file",
        "command": "gs_log_graph",
        "args": { "current_file": true }
    },
    {
        "caption": "github: open file on remote",
        "command": "gs_github_open_file_on_remote",
        "args": { "preselect": true }
    },
    {
        "caption": "github: open issues",
        "command": "gs_github_open_issues"
    },
    {
        "caption": "github: open repo",
        "command": "gs_github_open_repo"
    },
    {
        "caption": "github: review pull request",
        "command": "gs_github_pull_request"
    },
    {
        "caption": "github: set remote for integration",
        "command": "gs_github_configure_remote"
    },
    {
        "caption": "github: add fork as remote",
        "command": "gs_github_add_fork_as_remote"
    },
    {
        "caption": "github: create fork",
        "command": "gs_github_create_fork"
    },
    {
        "caption": "github: create pull request",
        "command": "gs_github_create_pull_request"
    },
    {
        "caption": "gitlab: open file on remote",
        "command": "gs_gitlab_open_file_on_remote",
        "args": { "preselect": true }
    },
    {
        "caption": "gitlab: open issues",
        "command": "gs_gitlab_open_issues"
    },
    {
        "caption": "gitlab: open repo",
        "command": "gs_gitlab_open_repo"
    },
    {
        "caption": "gitlab: set remote for integration",
        "command": "gs_gitlab_configure_remote"
    },
    {
        "caption": "gitlab: review merge request",
        "command": "gs_gitlab_merge_request"
    },
    {
        "caption": "git: remote add",
        "command": "gs_remote_add"

    },
    {
        "caption": "git: remote remove",
        "command": "gs_remote_remove"
    },
    {
        "caption": "git: remote rename",
        "command": "gs_remote_rename"
    },
    {
        "caption": "git: checkout",
        "command": "gs_checkout_branch"
    },
    {
        "caption": "git: checkout new branch",
        "command": "gs_checkout_new_branch"
    },
    {
        "caption": "git: checkout remote branch as local",
        "command": "gs_checkout_remote_branch"
    },
    {
        "caption": "git: checkout current file at commit",
        "command": "gs_checkout_current_file_at_commit"
    },
    {
        "caption": "git: fetch",
        "command": "gs_fetch"
    },
    {
        "caption": "git: pull",
        "command": "gs_pull"
    },
    {
        "caption": "git: pull with rebase",
        "command": "gs_pull",
        "args": { "rebase": true }
    },
    {
        "caption": "git: pull from branch",
        "command": "gs_pull_from_branch"
    },
    {
        "caption": "git: pull from branch with rebase",
        "command": "gs_pull_from_branch",
        "args": { "rebase": true }
    },
    {
        "caption": "git: push",
        "command": "gs_push"
    },
    {
        "caption": "git: push (force)",
        "command": "gs_push",
        "args": { "force": true }
    },
    {
        "caption": "git: push (force-with-lease)",
        "command": "gs_push",
        "args": { "force_with_lease": true }
    },
    {
        "caption": "git: push all tags",
        "command": "gs_tags_push",
        "args": { "push_all": true }
    },
    {
        "caption": "git: push to existing branch",
        "command": "gs_push_to_branch"
    },
    {
        "caption": "git: push to branch name",
        "command": "gs_push_to_branch_name"
    },
    {
        "caption": "git: ignore current file",
        "command": "gs_ignore"
    },
    {
        "caption": "git: ignore pattern",
        "command": "gs_ignore_pattern"
    },
    {
        "caption": "git: assume file unchanged",
        "command": "gs_assume_unchanged"
    },
    {
        "caption": "git: restore file assumed unchanged",
        "command": "gs_restore_assumed_unchanged"
    },
    {
        "caption": "git: init",
        "command": "gs_init"
    },
    {
        "caption": "git: clone",
        "command": "gs_clone"
    },
    {
        "caption": "git: diff",
        "command": "gs_diff"
    },
    {
        "caption": "git: diff cached",
        "command": "gs_diff",
        "args": { "in_cached_mode": true }
    },
    {
        "caption": "git: diff current file",
        "command": "gs_diff",
        "args": { "current_file": true }
    },
    {
        "caption": "git: diff current file (cached)",
        "command": "gs_diff",
        "args": { "in_cached_mode": true, "current_file": true }
    },
    {
        "caption": "git: compare against ...",
        "command": "gs_compare_against",
        "args": { "target_commit": "HEAD" }
    },
    {
        "caption": "git: compare current file against ...",
        "command": "gs_compare_against",
        "args": { "target_commit": "HEAD", "current_file": true }
    },
    {
        "caption": "git: blame current file",
        "command": "gs_blame_current_file"
    },
    {
        "caption": "GitSavvy: reload modules (debug)",
        "command": "gs_reload_modules_debug"
    },
    {
        "caption": "git: reflog",
        "command": "gs_ref_log"
    },
    {
        "caption": "git: log",
        "command": "gs_log"
    },
    {
        "caption": "git: log current file",
        "command": "gs_log",
        "args": { "current_file": true }
    },
    {
        "caption": "git: revert",
        "command": "gs_revert_commit"
    },
    {
        "caption": "git: show current file at commit",
        "command": "gs_show_current_file"
    },
    {
        "caption": "git: merge",
        "command": "gs_merge"
    },
    {
        "caption": "git: abort merge",
        "command": "gs_abort_merge"
    },
    {
        "caption": "git: abort rebase",
        "command": "gs_rebase_abort"
    },
    {
        "caption": "git: restart merge for file...",
        "command": "gs_restart_merge_for_file"
    },
    {
        "caption": "GitSavvy: help",
        "command": "gs_help"
    },
    {
        "caption": "git: generate changelog",
        "command": "gs_generate_change_log"
    },
    {
        "caption": "GitSavvy: enable logging",
        "command": "gs_start_logging"
    },
    {
        "caption": "GitSavvy: disable logging",
        "command": "gs_stop_logging"
    },
    {
        "caption": "GitSavvy: view recorded log",
        "command": "gs_view_git_log"
    },
    {
        "caption": "git: tags",
        "command": "gs_show_tags"
    },
    {
        "caption": "git: quick tag",
        "command": "gs_tag_create"
    },
    {
        "caption": "git: smart tag",
        "command": "gs_smart_tag"
    },
    {
        "caption": "git: branch",
        "command": "gs_show_branch"
    },
    {
        "caption": "git: rebase",
        "command": "gs_show_rebase"
    },
    {
        "caption": "git: reset",
        "command": "gs_reset"
    },
    {
        "caption": "git: reset (reflog)",
        "command": "gs_reset_reflog"
    },
    {
        "caption": "git: reset to branch",
        "command": "gs_reset_branch"
    },
    {
        "caption": "git: cherry-pick",
        "command": "gs_cherry_pick"
    },
    {
        "caption": "flow: init",
        "command": "gs_git_flow_init"
    },
    {
        "caption": "flow: feature start",
        "command": "gs_git_flow_feature_start"
    },
    {
        "caption": "flow: feature finish",
        "command": "gs_git_flow_feature_finish"
    },
    {
        "caption": "flow: release start",
        "command": "gs_git_flow_release_start"
    },
    {
        "caption": "flow: release finish",
        "command": "gs_git_flow_release_finish"
    },
    {
        "caption": "flow: hotfix start",
        "command": "gs_git_flow_hotfix_start"
    },
    {
        "caption": "flow: hotfix finish",
        "command": "gs_git_flow_hotfix_finish"
    },
    {
        "caption": "flow: support start",
        "command": "gs_git_flow_support_start"
    },
    {
        "caption": "flow: feature publish",
        "command": "gs_git_flow_feature_publish"
    },
    {
        "caption": "flow: feature pull",
        "command": "gs_git_flow_feature_pull"
    },
    {
        "caption": "flow: feature track",
        "command": "gs_git_flow_feature_track"
    },
    {
        "caption": "flow: release publish",
        "command": "gs_git_flow_release_publish"
    },
    {
        "caption": "flow: release pull",
        "command": "gs_git_flow_release_pull"
    },
    {
        "caption": "flow: release track",
        "command": "gs_git_flow_release_track"
    },
    {
        "caption": "flow: hotfix publish",
        "command": "gs_git_flow_hotfix_publish"
    },
    {
        "caption": "git: stash save",
        "command": "gs_stash_save"
    },
    {
        "caption": "git: stash save including untracked files",
        "command": "gs_stash_save",
        "args" : { "include_untracked": true }
    },
    {
        "caption": "git: stash save staged changes only",
        "command": "gs_stash_save",
        "args" : { "stash_of_indexed": true }
    },
    {
        "caption": "git: stash apply",
        "command": "gs_stash_apply"
    },
    {
        "caption": "git: stash pop",
        "command": "gs_stash_pop"
    },
    {
        "caption": "git: stash show",
        "command": "gs_stash_show"
    },
    {
        "caption": "git: stash drop",
        "command": "gs_stash_drop"
    },
    {
        "caption": "git: mv current file",
        "command": "gs_mv_current_file"
    }
]
